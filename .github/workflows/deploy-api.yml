# GitHub Actions Workflow para build e deploy automático da API .NET no Azure App Service
# -------------------------------------------------------------
# COMO FUNCIONA:
# 1. Dispara em cada push na branch main (e manual via aba Actions -> Run workflow).
# 2. Faz restore, build, (opcional testes), publish e deploy usando o Publish Profile do App Service.
# 3. App Service sobe e o Program.cs já aplica as migrations automaticamente.
# -------------------------------------------------------------
# PASSO A PASSO PARA CONFIGURAR OS SEGREDOS E VARIÁVEIS:
# - AZURE_WEBAPP_NAME: Nome do App Service (Portal Azure > App Service > Nome no topo). Ex: corretor-app-api-exbfc6f9gkgkg3bb
# - AZURE_PUBLISH_PROFILE (SECRET): No Portal Azure > App Service > botão "Get publish profile" (ou "Obter perfil de publicação"). Abra o arquivo .PublishSettings baixado e copie TODO o conteúdo para um secret no GitHub:
#     GitHub Repo > Settings > Secrets and variables > Actions > New repository secret
#     Name: AZURE_PUBLISH_PROFILE
#     Value: (colar o conteúdo inteiro do arquivo .PublishSettings)
# - DOTNET_VERSION: Versão major/minor usada pelo seu TargetFramework (net9.0 => 9.0.x)
# - SLOT opcional: Se usar deployment slot (ex: staging) crie AZURE_WEBAPP_SLOT_NAME e descomente o with: slot-name
# - VARIÁVEIS DE AMBIENTE DA APLICAÇÃO (Jwt:Key, ConnectionStrings etc.) DEVEM ser configuradas NO PORTAL do Azure (Configuration), NÃO neste workflow.
# -------------------------------------------------------------
# BOAS PRÁTICAS:
# - Não colocar segredos em plain text no YAML.
# - Manter Publish Profile rotacionado se houver suspeita de vazamento.
# - (Opcional) adicionar etapa de testes antes do deploy.
# - (Opcional) proteger a branch main com PR + CI obrigatória.
# -------------------------------------------------------------

name: Deploy API to Azure App Service

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

# Evita rodar vários deploys concorrentes da mesma branch ao mesmo tempo
concurrency:
  group: deploy-api-${{ github.ref }}
  cancel-in-progress: true

env:
  # Nome do App Service (Portal Azure > Overview)
  AZURE_WEBAPP_NAME: corretor-app-api3
  # Versão do .NET correspondente ao TargetFramework do projeto (net9.0)
  DOTNET_VERSION: '9.0.x'
  # Caminho onde ficará o publish (não alterar se não souber)
  PUBLISH_DIR: './publish'
  # (Opcional) Caso use monorepo e queira apontar o diretório do projeto API
  API_PROJECT_PATH: 'MeuCorretorApi/MeuCorretorApi.csproj'

jobs:
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
            path: ~/.nuget/packages
            key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
            restore-keys: |
              nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore MeuCorretorApi.sln

      - name: Build (Release)
        run: dotnet build ${{ env.API_PROJECT_PATH }} -c Release --no-restore

      # Descomente se criar testes (ex: Projeto Tests/):
      # - name: Testes
      #   run: dotnet test --no-build --configuration Release --verbosity normal

      - name: Publish
        run: dotnet publish ${{ env.API_PROJECT_PATH }} -c Release -o ${{ env.PUBLISH_DIR }} --no-build

      - name: Listar arquivos publicados (debug)
        run: ls -R ${{ env.PUBLISH_DIR }} | head -100

      - name: Deploy para Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Nome do App Service
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }} # Secret criado com conteúdo do Publish Profile
          package: ${{ env.PUBLISH_DIR }}
          # slot-name: ${{ env.AZURE_WEBAPP_SLOT_NAME }} # Descomente e defina se usar slot

      - name: URL final
        run: |
          echo "Aplicação disponível (após warmup) em: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" 
          echo "Swagger (se habilitado): https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger"
